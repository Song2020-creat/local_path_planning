// Generated by gencpp from file pkg_netproxy/UavStatus.msg
// DO NOT EDIT!


#ifndef PKG_NETPROXY_MESSAGE_UAVSTATUS_H
#define PKG_NETPROXY_MESSAGE_UAVSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace pkg_netproxy
{
template <class ContainerAllocator>
struct UavStatus_
{
  typedef UavStatus_<ContainerAllocator> Type;

  UavStatus_()
    : header()
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , baro_altitude(0.0)
    , tf_altitude(0.0)
    , velocity_n(0.0)
    , velocity_e(0.0)
    , velocity_d(0.0)
    , g_latitude(0.0)
    , g_longitude(0.0)
    , g_altitude(0.0)  {
    }
  UavStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , baro_altitude(0.0)
    , tf_altitude(0.0)
    , velocity_n(0.0)
    , velocity_e(0.0)
    , velocity_d(0.0)
    , g_latitude(0.0)
    , g_longitude(0.0)
    , g_altitude(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef float _baro_altitude_type;
  _baro_altitude_type baro_altitude;

   typedef float _tf_altitude_type;
  _tf_altitude_type tf_altitude;

   typedef float _velocity_n_type;
  _velocity_n_type velocity_n;

   typedef float _velocity_e_type;
  _velocity_e_type velocity_e;

   typedef float _velocity_d_type;
  _velocity_d_type velocity_d;

   typedef double _g_latitude_type;
  _g_latitude_type g_latitude;

   typedef double _g_longitude_type;
  _g_longitude_type g_longitude;

   typedef double _g_altitude_type;
  _g_altitude_type g_altitude;





  typedef boost::shared_ptr< ::pkg_netproxy::UavStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_netproxy::UavStatus_<ContainerAllocator> const> ConstPtr;

}; // struct UavStatus_

typedef ::pkg_netproxy::UavStatus_<std::allocator<void> > UavStatus;

typedef boost::shared_ptr< ::pkg_netproxy::UavStatus > UavStatusPtr;
typedef boost::shared_ptr< ::pkg_netproxy::UavStatus const> UavStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_netproxy::UavStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_netproxy::UavStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg_netproxy::UavStatus_<ContainerAllocator1> & lhs, const ::pkg_netproxy::UavStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.baro_altitude == rhs.baro_altitude &&
    lhs.tf_altitude == rhs.tf_altitude &&
    lhs.velocity_n == rhs.velocity_n &&
    lhs.velocity_e == rhs.velocity_e &&
    lhs.velocity_d == rhs.velocity_d &&
    lhs.g_latitude == rhs.g_latitude &&
    lhs.g_longitude == rhs.g_longitude &&
    lhs.g_altitude == rhs.g_altitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg_netproxy::UavStatus_<ContainerAllocator1> & lhs, const ::pkg_netproxy::UavStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg_netproxy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pkg_netproxy::UavStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_netproxy::UavStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_netproxy::UavStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_netproxy::UavStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_netproxy::UavStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_netproxy::UavStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_netproxy::UavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e2778f4d8e4263c2ff410b965eb52cc";
  }

  static const char* value(const ::pkg_netproxy::UavStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e2778f4d8e4263cULL;
  static const uint64_t static_value2 = 0x2ff410b965eb52ccULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_netproxy::UavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_netproxy/UavStatus";
  }

  static const char* value(const ::pkg_netproxy::UavStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_netproxy::UavStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"#位姿信息\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
"\n"
"#GPS位置\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"\n"
"#气压计高度\n"
"float32 baro_altitude\n"
"#激光测高\n"
"float32 tf_altitude\n"
"\n"
"#三轴速度\n"
"float32 velocity_n\n"
"float32 velocity_e\n"
"float32 velocity_d\n"
"\n"
"#目标点信息\n"
"float64 g_latitude\n"
"float64 g_longitude\n"
"float64 g_altitude\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::pkg_netproxy::UavStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_netproxy::UavStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.baro_altitude);
      stream.next(m.tf_altitude);
      stream.next(m.velocity_n);
      stream.next(m.velocity_e);
      stream.next(m.velocity_d);
      stream.next(m.g_latitude);
      stream.next(m.g_longitude);
      stream.next(m.g_altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UavStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_netproxy::UavStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_netproxy::UavStatus_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "baro_altitude: ";
    Printer<float>::stream(s, indent + "  ", v.baro_altitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "tf_altitude: ";
    Printer<float>::stream(s, indent + "  ", v.tf_altitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity_n: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_n);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity_e: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_e);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "velocity_d: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_d);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "g_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.g_latitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "g_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.g_longitude);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "g_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.g_altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_NETPROXY_MESSAGE_UAVSTATUS_H
