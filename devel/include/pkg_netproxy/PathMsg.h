// Generated by gencpp from file pkg_netproxy/PathMsg.msg
// DO NOT EDIT!


#ifndef PKG_NETPROXY_MESSAGE_PATHMSG_H
#define PKG_NETPROXY_MESSAGE_PATHMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point32.h>

namespace pkg_netproxy
{
template <class ContainerAllocator>
struct PathMsg_
{
  typedef PathMsg_<ContainerAllocator> Type;

  PathMsg_()
    : header()
    , hb30(0)
    , path_ok(0)
    , min_dis(0.0)
    , path_points()  {
    }
  PathMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hb30(0)
    , path_ok(0)
    , min_dis(0.0)
    , path_points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _hb30_type;
  _hb30_type hb30;

   typedef int32_t _path_ok_type;
  _path_ok_type path_ok;

   typedef float _min_dis_type;
  _min_dis_type min_dis;

   typedef std::vector< ::geometry_msgs::Point32_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point32_<ContainerAllocator> >> _path_points_type;
  _path_points_type path_points;





  typedef boost::shared_ptr< ::pkg_netproxy::PathMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pkg_netproxy::PathMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PathMsg_

typedef ::pkg_netproxy::PathMsg_<std::allocator<void> > PathMsg;

typedef boost::shared_ptr< ::pkg_netproxy::PathMsg > PathMsgPtr;
typedef boost::shared_ptr< ::pkg_netproxy::PathMsg const> PathMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pkg_netproxy::PathMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pkg_netproxy::PathMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pkg_netproxy::PathMsg_<ContainerAllocator1> & lhs, const ::pkg_netproxy::PathMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hb30 == rhs.hb30 &&
    lhs.path_ok == rhs.path_ok &&
    lhs.min_dis == rhs.min_dis &&
    lhs.path_points == rhs.path_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pkg_netproxy::PathMsg_<ContainerAllocator1> & lhs, const ::pkg_netproxy::PathMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pkg_netproxy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pkg_netproxy::PathMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pkg_netproxy::PathMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_netproxy::PathMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pkg_netproxy::PathMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_netproxy::PathMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pkg_netproxy::PathMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pkg_netproxy::PathMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8544cf96a4ba5e5ad61125bfbe08010c";
  }

  static const char* value(const ::pkg_netproxy::PathMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8544cf96a4ba5e5aULL;
  static const uint64_t static_value2 = 0xd61125bfbe08010cULL;
};

template<class ContainerAllocator>
struct DataType< ::pkg_netproxy::PathMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pkg_netproxy/PathMsg";
  }

  static const char* value(const ::pkg_netproxy::PathMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pkg_netproxy::PathMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 时间戳\n"
"std_msgs/Header header\n"
"# 是否有障碍（0=无，1=有）\n"
"int32 hb30\n"
"# 是否有路径（0=无，1=有）\n"
"int32 path_ok\n"
"# 与障碍物的最小距离\n"
"float32 min_dis\n"
"# 路径点数组（经纬度）\n"
"geometry_msgs/Point32[] path_points\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::pkg_netproxy::PathMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pkg_netproxy::PathMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hb30);
      stream.next(m.path_ok);
      stream.next(m.min_dis);
      stream.next(m.path_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pkg_netproxy::PathMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pkg_netproxy::PathMsg_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "hb30: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hb30);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "path_ok: ";
    Printer<int32_t>::stream(s, indent + "  ", v.path_ok);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "min_dis: ";
    Printer<float>::stream(s, indent + "  ", v.min_dis);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "path_points: ";
    if (v.path_points.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.path_points.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.path_points[i]);
    }
    if (v.path_points.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // PKG_NETPROXY_MESSAGE_PATHMSG_H
